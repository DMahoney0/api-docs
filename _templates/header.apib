FORMAT: 1A

HOST: https://example.com/api/v2

Metasys API
===========

The Metasys API is the exposed interface to access system data. This document defines the contracts included in that interface.

## Base URL

This documentation is for Metasys 10.1 which ships with version 2 of the Metasys Server API.
This document was last updated on {{revision}}.

The base endpoint for the API is `https://{host}/api/v2` where `{host}` is the host name of your Metasys server.

### API version notes

At Metasys 10.1, the only supported version is v2. (Note: v1 is not supported by Metasys 10.1)

In the future, multiple versions of this API may be supported on one release of Metasys.
It is required that you explicitly specify which version you intend to use. This is done by specifying the version in the URL using the format "v[#]":

For example, `http://localhost/api/v2/spaces` for version 2 of spaces

#### Version response behavior

To enable the consumer to identify, which version of the API is active, the `Content-Type` header of the response always contains in part, the version of the API that you used to serve the request.

See the following example for version 2, `Content-Type: application/vnd.metasysapi.v2+json`.

## Pagination

On endpoints that use `page` and `pageSize`, the default `page` number is 1, and is 1-based for all endpoints. The default `pageSize` varies between endpoints.  The `page` parameter indicates the `page` number of items to return from the endpoint.  The `pageSize` parameter indicates the maximum number of items in the response from the endpoint.

Payloads returned by pagination-enabled endpoints have a similar structure. A `total` property indicates the total number of items included in all pages. A `next` and `previous` property supplies a link to the next and previous page of data, respectively. If irrelevant leave these properties empty, for example, it is the first or last page, or there is only one page of data. The `items` property contains the data included in the page.

## Sorting rules

On endpoints that allow a ‘sort’ query, use a single attribute name format for the supplied value. For descending order, use the prefix ‘-‘. A prefix is not required for ascending order.

## Relationship links

Payloads may contain links to related data, with each payload represented as a property sharing the name of the respective relationship. The links point to either single or multiple related entities. A link to a single entity points to the canonical endpoint for that entity. A link to multiple entities points to an endpoint that is dedicated to representing that particular relationship.

For example, if object `/objects/a` has children `/objects/b` and `/objects/c`, the payload returned by `/objects/a` will have a property `objects` with a value of `/objects/a/objects`, because multiple children can be returned. However, the payload returned by `/objects/b/` will contain a property 'parent' with a value of `/objects/a` (not `/objects/b/parent`), because the relationship represents a single entity.

Additionally, each payload contains a `self` property, which contains a link that represents what endpoint you use to obtain the data that the current payload contains.

## DateTimes

Unless otherwise specified, all date times in the document use ISO-8601 encoding.

## Validation

General rules apply across all endpoints, and if you provide invalid inputs or do not meet certain preconditions, the API responds with an appropriate error to indicate what went wrong.

|Condition                      |Error                       |Details                                                                                                     |
|-------------------------------|----------------------------|------------------------------------------------------------------------------------------------------------|
|Missing required parameter     |400 (Bad Request)           |The request does not include a parameter marked required.                                                   |
|Parameter incorrect type       |400 (Bad Request)           |The parameter value type is incorrect. For example, use a number instead of a string.                       |
|Parameter out of range         |400 (Bad Request)           |The value of the numeric parameter is outside the allowed range.                                            |
|Parameter not in set           |400 (Bad Request)           |The string parameter does not match the set of predefined values.                                           |
|Parameter not in correct format|400 (Bad Request)           |The string parameter format is incorrect.                                                                   |
|User not authenticated         |401 (Unauthorized)          |The authentication token supplied by the request is missing, invalid, or expired.                           |
|Record not authorized          |403 (Forbidden)             |You are not authorized to view data matching the provided identifier.                                       |
|Identifier not found           |404 (Not Found)             |The identifier you provided does not match any known data.                                                  |
|The Resource already exists    |409 (Conflict)              |The resource already exists.                                                                                |
|Internal Server Error          |500 (Internal Server Error) |An unexpected error occured.                                                                                |
|The device is not supported    |501 (Not Implemented)       |The server does not support the functionality it requires to fulfill the request.                           |
|The device is offline          |503 (Service Unavailable)   |The device is currently offline and unable to serve the request.                                            |
